#!/usr/bin/env bash
## This is a part of main script: mpm.

# shellcheck disable=SC2154
_ViewAudioVideoUrlsInfo() {

    local stars

    declare -a viewUrlInfoPrompt=(
        "${info}[${mtitle}M${info}]ain menu,"
        "[A]dd links," "[D]ownload," "[E]dit,"
        "[P]lay," "[R]emove," "[S]ave:"
    )

    declare -a mpvOwnsInfoPrompt=(
        "${viewUrlInfoPrompt[0]}"
        "[D]ownload (this list will be preserved after download)"
    )

    __listHeader() {
        clear
        _BlankLine
        mapfile -t tmpListCount < "$TITLES"
        if ((${#tmpListCount[@]} > 12)); then
            if ((${#tmpListCount[@]} > 25)); then
                stars=$(printf "%-42s" "*")
                printf '%s\n' \
                " ${info}ORDER | $menuTitleType PLAYLIST TITLES ${b}(page 1/2)${nb}${nc}"
                echo -e " ${info}${stars// /*}${nc}\n"
                awk 'NR>=1&&NR<=25' "$TITLES" | nl
                _BlankLine
                read -rsn 1 -p " ${viewUrlInfoPrompt[0]} [N]ext page: ${nc}" nextpage
                case "$nextpage" in
                    [mM]) _Menu ;;
                    [nN])
                        clear
                        printf '\n%s\n' \
                        " ${info}ORDER | $menuTitleType PLAYLIST TITLES ( page 2 )${nc}"
                        echo -e " ${info}${stars// /*}${nc}\n"
                        awk 'NR>=26&&NR<=50' "$TITLES" | nl -v 26
                        _BlankLine
                    ;;
                    *)
                        _WrongOption "$nextpage"
                        _Menu
                    ;;
                esac
            else
                stars=$(printf "%-56s" "*")
                printf '%s\n' \
                " ${info}ORDER | $menuTitleType PLAYLIST TITLES (too many urls to show).${nc}"
                echo -e " ${info}${stars// /*}${nc}\n"
                nl "$menuTitleType_$TITLES"
                _BlankLine
            fi
        else
            printf '%s\n' " ${info}ORDER |  $menuTitleType PLAYLIST LINKS & TITLES.${nc}"
            stars=$(printf "%-55s" "*")
            echo -e " ${info}${stars// /*}${nc}\n"
            awk '$0 ~ /^https/{print $0}' "$menuTitleType_$URLS" \
            | nl && {
                _BlankLine
                nl "$menuTitleType_$TITLES"
                _BlankLine
            }
        fi

        if [[ $URLS == "$DEFAULT_LIST" ]]; then
            if [[ $downloadTmpList == default ]]; then
                echo " ${info}${mpvOwnsInfoPrompt[*]}${nc}"
            else
                unset 'viewUrlInfoPrompt[1]'
                echo " ${info}${viewUrlInfoPrompt[*]}${nc}"
            fi
        else
            if [[ $downloadTmpList == list ]]; then
                echo " ${info} ${mpvOwnsInfoPrompt[*]}${nc}"
            else
                echo " ${info}${viewUrlInfoPrompt[*]}${nc}"
            fi
        fi

    }

    __audioVideoCommon() {

        if [[ -s $URLS ]]; then
            _ResizeWindow --main
            __listHeader

            read -rsn 1 audioVideoCommonOptions

            case "$audioVideoCommonOptions" in
                [aA]) _CreateAddPlaylist "$arg" ;;
                [dD]) _CreateAddPlaylistActions --download ;;
                [eE]) _MpvOwnsTmpList --list --edit || _EditListTitles ;;
                [mM]) _Menu ;;
                [pP]) _CreateAddPlaylistActions --play ;;
                [rR]) _CreateAddPlaylistActions --remove ;;
                [sS]) _CreateAddPlaylistActions --save ;;
                *)
                    _WrongOption "$audioVideoCommonOptions"
                    return
                ;;
            esac
        else
            _ResizeWindow --copy
            printf '%s\n' " ${critical}$Type list is empty.${nc}"
            sleep 2; return
        fi

    }

    case "$1" in
        -a|-v) __audioVideoCommon ;;
        -d) _ViewDefaultUrlsInfo ;;
    esac

}
