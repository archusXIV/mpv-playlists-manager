#!/bin/bash
## This is a part of main script: mpm.

_ChooseDownloadVideo() {
    cd "$playlists_dir" || exit 1
    # first test if $list.titles is not empty
    if [[ -f $titles_dir/$list.titles ]]; then
        __
        echo -e " ${g}Titles for $list.${nc}\n"
        cat -n "$titles_dir"/"$list".titles
        __
    else
        echo -e " ${g}Getting titles...please wait.${nc}\n"
        
        mapfile -t CHOOSEDLIST < <(grep -v '#EXTM3U' "$list")
        
        for item in "${CHOOSEDLIST[@]}"; do
            youtube-dl --no-warnings --get-title "$item"
        done > "$titles_dir"/"$list".titles
        cat -n "$titles_dir"/"$list".titles
        __
    fi

    IFS=","; read -a array -p " Enter links separeted by comma, eg: 3,1,5: "
    
    for i in ${array[*]}; do
    
        sed -n "${i}p" "$titles_dir"/"$list".titles >> "$CHOOSE2"
        sed -i "${i}d" "$titles_dir"/"$list".titles
        let "i++"
        sed -n "${i}p" "$list" >> "$CHOOSE1"
        clear
        
    done
    
    clear
    cp -f "$list" "$list"_origin 2>/dev/null
    cp -f "$CHOOSE1" "$CHOOSE1"_origin
    cp -f "$CHOOSE2" "$CHOOSE2"_origin
    
    cd "$videos_dir" || exit 1
    
    mapfile -t < <(grep '^https' "$CHOOSE1")
    
    for url in "${MAPFILE[@]}"; do
        clear
        echo " ${g}$(_GetLinesList -c) video(s) file(s) left to download.${nc}"
        echo -e " ${g}Codes for: $(_GetLinkTitle -c).${nc}\n"
        if [[ $url =~ 'youtube.com' ]]; then
            youtube-dl -F --no-warnings "$url" | sed '1,4d;/^sb/d;/3gp/d'
        else
            youtube-dl -F --no-warnings "$url"
        fi
        __
        echo -e " ${g}Choose a format code. \n eg: 137+251 for merging, hls-1080p, 22 for single:${nc}"
        read -r code
        clear
        
        if [[ "$code" =~ '+' ]]; then
            echo " ${g}Please be patient while downloading and merging formats for:"
            echo -e " ${r}$(_GetLinkTitle -c).${nc}\n"
            youtube-dl -f "$code" --no-warnings --merge-output-format mp4 --progress "$url"
        else
            echo " ${g}Please be patient while downloading:"
            echo -e " ${r}$(_GetLinkTitle -d).${nc}\n"
            youtube-dl -f "$code" --no-warnings --progress "$url"
        fi
        
        sed -i '1d' {"$CHOOSE1","$CHOOSE2"}
        clear
        
    done
    
    cd "$playlists_dir" || exit 1
    
    # let's remove downloaded links from the original file
    # and sending the other ones in a second temporary file...
    for line in $(grep -e '^https' "$CHOOSE1"_origin); do
        grep -v "${line}" "$list" >> "$CHOOSE3"
    done
    
    # ...that we now rename with the original file name.
    mv -f "$CHOOSE3" "$list"
    
    echo -e " ${g}Done${nc}\n"
    sleep 2s
    _DownloadCompleted

}

