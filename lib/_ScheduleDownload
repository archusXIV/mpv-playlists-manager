#!/usr/bin/env bash
## This is a part of main script: mpm.

# shellcheck disable=SC2154
_ScheduleDownload() {

    [[ -z $schedules_dir ]] && {
        printf '%s\n' " ${critical}schedule_dir isn't defined..." \
        " Please check your mpmrc file${nc}"
        sleep 4
        _Menu
    }

    local schedulesFile schedulesDateTime lstCount dash
    schedulesFile="$schedules_dir/schedules.txt"
    lstCount=0

    [[ ! -d $schedules_dir ]] && mkdir -p "$schedules_dir"

    __sortSchedulesFile() { sort -t'|' -k1 "$schedulesFile" -o "$schedulesFile"; }
    __removeSchedulesFile() { [[ ! -s "$schedulesFile" ]] && rm "$schedulesFile"; }

    [[ -n $scheduleDate ]] && unset scheduleDate
    [[ -n $scheduleTime ]] && unset scheduleTime

    clear
    # Print existing schedules with line numbers if file exists
    if [[ -f "$schedulesFile" ]]; then
        __sortSchedulesFile
        echo -e "\n ${info}${B}Current schedules:${NB}${nc}\n"
        maxLength=$(awk -F'|' '{print length($0)}' "$schedulesFile" | sort -nr | head -n1)
        dash=$(printf "%-${maxLength}s" "─")
        printf '%s\n' " ${info}N |   DATE    | TIME  | TYPES | PLAYLISTS${nc}"
        echo " ${info}${dash// /─}${nc}"
        nl -w2 -s') ' "$schedulesFile"
    fi

    printf '\n%s\n' " ${critical}Ensure that the mpmsw script is in your \$PATH.${nc}"

    _BlankLine
    read -rn 10 \
    -p " ${info}Enter date (YYYY-MM-DD) for playlist '$LIST': ${nc}" scheduleDate
    # Validate date format strictly matches YYYY-MM-DD
    if [[ ! "$scheduleDate" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
        printf '\n%s\n' \
        " ${critical}Invalid date format, try again.${nc}"
        sleep 2
        clear
        return
    else
        _BlankLine
        read -rn 5 \
        -p " ${info}Enter time (HH:MM) for playlist '$LIST': ${nc}" scheduleTime
         # Validate time format
        if [[ ! $scheduleTime =~ ^[0-2][0-9]:[0-5][0-9]$ ]]; then
            printf '\n%s\n' \
            " ${critical}Invalid time format , try again.${nc}"
            sleep 2
            clear
            return
        else
            schedulesDateTime="$scheduleDate @ $scheduleTime"
            _BlankLine
            read -r -p " ${info}Type of download, [A]udio or [V]ideo?: ${nc}" downloadType
            case "${downloadType}" in
                [aA]) echo "$schedulesDateTime | audio | $list" >> "$schedulesFile" ;;
                [vV]) echo "$schedulesDateTime | video | $list" >> "$schedulesFile" ;;
                *)
                    _WrongOption "$downloadType"
                    return
                ;;
            esac

            _RemoveDuplicateLines "$schedulesFile"

            # check if we entered duplicate schedule date & time
            while read -r line; do
                [[ $line =~ ^$scheduleDate && $line =~ $scheduleTime ]] && ((lstCount++))
            done < "$schedulesFile"
            if ((lstCount > 1)); then
                sed -i '$d' "$schedulesFile"
                __removeSchedulesFile
                printf '\n%s\n' \
                " ${critical}Scheduled downloads time already exists...Schedule cancelled.${nc}"
                sleep 4
                clear
                return
            fi

            _BlankLine
            _Prompt " ${info}Schedule download of $LIST for ${task}$schedulesDateTime?${nc}" || {
                sed -i '$d' "$schedulesFile"
                __removeSchedulesFile
                printf '\n%s\n' " ${critical}Schedule cancelled.${nc}"
                sleep 2
                clear
                return
            }
            __sortSchedulesFile
            mv -f "$playlists_dir/$list" "$schedules_dir/$list"
            mv -f "$titles_dir/$list.titles" "$schedules_dir/$list.titles"
            __removeSchedulesFile
            printf '%s\n' " ${info}Playlist '$LIST' download scheduled.${nc}"
            sleep 2
            _ValidateSchedules
            clear
        fi
    fi

}
