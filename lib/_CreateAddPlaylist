#!/bin/bash
## This is a part of main script: mpm.

# shellcheck disable=SC2154,SC2015
_CreateAddPlaylist() {

    local Type TITLES URLS menuTitleType arg mediaUrl supportedSites
    supportedSites="https://github.com/ytdl-org/youtube-dl/blob/master/docs/supportedsites.md"
    test -f "$tmp_dir"/1 && rm "$tmp_dir"/1

    case "$1" in
        -a)
            Type=Audio
            TITLES="$AUDIO_TITLES"
            URLS="$AUDIO_URLS"
            menuTitleType=AUDIO
            arg="-a"
        ;;
        -v)
            Type=Video
            TITLES="$VIDEO_TITLES"
            URLS="$VIDEO_URLS"
            menuTitleType=VIDEO
            arg="-v"
        ;;
    esac

    while (( $(grep "" -c "$QUEUE") > 0 )); do
    
        __copyLinks() (
            __
            echo -e " Paste an url to fill the ${info}${Type}${nc} playlist:\n"
            read -r mediaUrl

            if [[ $mediaUrl =~ 'playlist?list=' ]]; then
                __
                printf '%s\n' " ${info}Getting titles & links from playlist: $(\
                youtube-dl "${ytdlPreset_DW[@]}" -J --flat-playlist "$mediaUrl" \
                | jq -r .title)..." \
                "${b} Please be patient.${nb}${nc}"
                
                _YtdlGetTitle "$mediaUrl" \
                | tee -a "$TITLES" >> "$DEFAULTITLES"
                _GetYoutubePlaylistUrls $arg
                _RemoveCrap
            else

                echo "$mediaUrl" >> "$URLS"
                __
                echo -e " ${info}Testing url...${nc}"
                _RemoveCrap
                mediaUrl=$(sed -n '$p' "$URLS")
                youtube-dl -F "${ytdlPreset_DW[@]}" "$mediaUrl" > "$YTOP"

                if [[ $? -eq 1 ]]; then
                    __
                    echo -e " ${critical}${b}No format code found!${nb}\n$mediaUrl will be removed."
                    echo " ${info}Please visit: $supportedSites${nc}"
                    sed -i '$d' "$URLS"
                    _RemoveCrap
                    sleep 7
                    [[ $(_GetLinesList $arg) -eq 0 ]] && return
                else
                    echo "$mediaUrl" >> "$QUEUE"
                    echo -e " ${info}Getting ${Type} title...${nc}\n"
                    _YtdlGetTitle "$mediaUrl" \
                    | tee -a "$TITLES" >> "$DEFAULTITLES"
                    _RemoveCrap
                fi

            fi
        )
        
        while true; do
            _ResizeWindow
            clear
            
            test -s "$YTSEARCH" && _GetYoutubePlaylistUrls -s
            __
            test -s "$URLS"  && \
            echo -e " ${info}${Type} list: $(_GetLinesList $arg) url(s)${nc}"
            __
            [[ $(awk -F"/" '{print $NF}' "$NOWPLAYING" 2>/dev/null) =~ $Type ]] && {
                pgrep -x mpv >/dev/null && {
                    printf '%s\n' " ${critical}$Type list is owned by mpv..." \
                                    " if you want to perform any action on it," \
                                    " just quit mpv first to continue.${nc}"
                    __
                    read -rsn 1 -p " ${info}[Q]uit mpv, [A]bort: ${nc}" quitMpv
                    case "$quitMpv" in
                        q|Q)
                            kill -SIGTERM "$(pidof mpv)" && continue
                        ;;
                        a|A)
                            _Menu
                        ;;
                        *)
                            _WrongOption "$quitMpv" && _Menu
                        ;;
                    esac
                }
                rm "$NOWPLAYING"
            }
            echo -e "                                                  ${mtitle}::${menuTitleType} OPTIONS::${nc}"
            echo -e "                               ┌──────────────────────────────────────────────────────┐"
            echo -e "                               │   1) Add ${Type} links         5) Play current list    │"
            command -v fzf >/dev/null || echo -e "                               │   2) ${critical}Search online links ${nc}    6) View current list    │" \
            && echo -e "                               │   2) Search online links     6) View current list    │"
            echo -e "                               │   3) Download current list   7) Clear current list   │"
            echo -e "                               │   4) Save/Add current list   8) Back to main menu    │"
            echo -e "                               └──────────────────────────────────────────────────────┘"
            test -s "$URLS"  \
            && echo -e "                                                   ${info}Select an item${nc}" \
            || echo -e "                                                   ${info}${b}Select an item${nb}${nc}"
            __
            read -rsn 1 createAddPlaylistOptions
            case "$createAddPlaylistOptions" in
                1)  __copyLinks
                    __ ;;
                2)
                    if [[ $use_fzf = yes ]]; then
                        clear
                        _SearchOnline
                    else
                        __
                        printf '%s\n' \
                            " ${critical}fzf is set to NO in your mpmrc file..." \
                            " no way to search on youtube!${nc}"
                        sleep 5
                    fi
                ;;
                3)
                    [[ $arg = '-a' ]] && _GetAudio -a || _GetVideo -v
                    __ ;;
                4)  _Save $arg
                    __ ;;
                5)  [[ -n $(pidof mpv) ]] && {
                        printf '%s\n' " ${critical}mpv is already running...${nc}"
                        sleep 2
                    } || _LoadAudioVideo $arg
                    __ ;;
                6)  _ViewUrlInfo $arg
                    __ ;;
                7)  _Remove $arg
                    __ ;;
                8)  _Menu
                    __ ;;
                *)
                    _WrongOption "$createAddPlaylistOptions" && continue
                ;;
            esac
            
        done

    done

}