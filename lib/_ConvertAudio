#!/bin/bash
## This is a part of main script: mpm.

# shellcheck disable=SC2034,SC2154
_ConvertAudio() {

    cd "$mediaDir" || {
        printf '%s\n' \
        " ${critical}Failed to access audio directory.${nc}"
        sleep 4
        _Menu
    }

    local webmFiles

    mapfile -t webmFiles < <(find . -iname "*.webm")

    if [[ -n $default_conversion_format ]]; then
        printf '\n%s\n' \
        " ${info}Conversion format set to $default_conversion_format."
        printf '\n%s\n' \
        " Converting files in ${task}${b}$default_conversion_format...${nb}"
        __
        if [[ -n $(command -v parallel) \
            && $use_parallel == yes \
            && $parallel_conversion == yes ]]; then
            _ParallelConversion --parallel-default
        elif [[ -n $(command -v xargs) && $parallel_conversion == yes ]]; then
            _ParallelConversion --xargs-default
        else
            printf '%s\n' " Parallel conversion disabled, please be patient.${nc}"
            _ConvertAudio_"$default_conversion_format"
            printf '\n%s\n' " ${info}Conversion done.${nc}"
            sleep 2
        fi
    else
        printf '\n%s\n' " ${critical}Conversion format isn't set..." \
        " make sure audio codecs/plugins are installed." \
        " ${info}(Press Enter to abort conversion)${nc}"
        declare -A formats=(
            [1]="aac"
            [2]="flac"
            [3]="mp3"
            [4]="ogg"
            [5]="wav"
        )
        __
        read -rn1 \
        -p " ${info}Select an output format [1]=aac [2]=flac [3]=mp3 [4]=ogg [5]=wav: ${nc}"

        case "$REPLY" in
            [1-5])
                printf '\n%s\n' \
                " ${info}Converting files in ${task}${b}${formats[${REPLY}]}...${nb}"
                __
                if [[ -n $(command -v parallel) \
                    && $use_parallel == yes \
                    && $parallel_conversion == yes ]]; then
                    _ParallelConversion --parallel-chosen
                elif [[ -n $(command -v xargs) && $parallel_conversion == yes ]]; then
                    _ParallelConversion --xargs-chosen
                else
                    printf '%s\n' " Parallel conversion disabled, please be patient.${nc}"
                    _ConvertAudio_"${formats[${REPLY}]}"
                    printf '\n%s\n' " ${info}Conversion done.${nc}"
                    sleep 2
                fi
            ;;
            *)
                find "$audios_dir" -maxdepth 2 -name "*.webm" >/dev/null && {
                    mv ./*.webm "$MUSIC_DIR"
                    printf '\n%s\n' " ${critical}Conversion aborted or wrong option," \
                    " All .webm files have been moved in $MUSIC_DIR.${nc}"
                    sleep 4
                    __
                }
            ;;
        esac

    fi

    find . -iname "*.webm" -exec rm {} \; 2>/dev/null
    clear

}
