#!/bin/bash
## This is a part of main script: mpm.

# shellcheck disable=SC2034,SC2154,SC1083,SC2038
_ConvertAudio() {

    local webmFiles

    cd "$mediaDir" || {
        printf '%s\n' \
        " ${critical}Failed to access audio directory.${nc}"
        sleep 4
        _Menu
    }
    
    __xargsParallelConversion() {
        case "$1" in
            --default)
                find . -iname "*.webm" | xargs -I % -P 5 \
                    ffmpeg -hide_banner -loglevel error \
                    -y -i % %."$default_conversion_format"
            ;;
            --chosen)
                find . -iname "*.webm" | xargs -I % -P 5 \
                    ffmpeg -hide_banner -loglevel error \
                    -y -i % %."${formats[${REPLY}]}"
            ;;
        esac

        find . -iname "*.webm" -exec rm {} \;
        # now let's cleam the suffix of our converted files (.webm.{aac,mp3,flac,ogg,wav})
        find . -maxdepth 1 -type f -name "* *" -exec \
            bash -c '
                for dot in "$@"; do
                    n="${dot##*/}"
                    mv -n "$dot" "${dot%/*}/${n//.webm/}"
                done >/dev/null 2>&1
            ' dummy {} +
    }

    # because webmFiles is local child functions will inherite its value.
    mapfile -t webmFiles < <(find . -iname "*.webm")
    
    if [[ -n $default_conversion_format ]]; then
        __
        printf '%s\n' \
        " ${info}Conversion format set to $default_conversion_format."
        __
        printf '%s\n' \
        " Converting files in ${task}${b}$default_conversion_format...${nb}"
        __
        if [[ -n $(command -v parallel) \
            && $use_parallel = yes \
            && $parallel_conversion = yes ]]; then

            printf '%s\n' " Parallel conversion enabled."
            parallel --delay 2.5 --jobs "$parallel_threads" --bar \
            ffmpeg \
                -hide_banner -loglevel error \
                -y -i {} -qscale:a 0 {.}."$default_conversion_format" ::: ./*.webm

        elif [[ -n $(command -v xargs) && $parallel_conversion = yes ]]; then
            __xargsParallelConversion --default
        else
            printf '%s\n' " Parallel conversion disabled.${nc}"
            _ConvertAudio_"$default_conversion_format"
        fi
    else
        __
        printf '%s\n' " ${critical}Conversion format isn't set..." \
        " ${info}(Press Enter to abort conversion.)${nc}"
        declare -A formats=(
            [1]="aac"
            [2]="flac"
            [3]="mp3"
            [4]="ogg"
            [5]="wav"
        )
        __
        read -rn1 \
        -p " ${info}Select an output format [1]=aac [2]=flac [3]=mp3 [4]=ogg [5]=wav: ${nc}"
        
        case "$REPLY" in
            [1-5])
                __
                printf '%s\n' \
                " ${info}Converting files in ${task}${b}${formats[${REPLY}]}...${nb}"
                __
                if [[ -n $(command -v parallel) \
                    && $use_parallel = yes \
                    && $parallel_conversion = yes ]]; then

                    printf '%s\n' " Parallel conversion enabled."
                    parallel --delay 2.5 --jobs "$parallel_threads" --bar \
                    ffmpeg \
                        -hide_banner -loglevel error \
                        -y -i {} -qscale:a 0 {.}."${formats[${REPLY}]}" ::: ./*.webm

                elif [[ -n $(command -v xargs) && $parallel_conversion = yes ]]; then
                    __xargsParallelConversion --chosen
                else
                    printf '%s\n' " Parallel conversion disabled.${nc}"
                    _ConvertAudio_"${formats[${REPLY}]}"
                fi
            ;;
            *)
                find "$audios_dir" -maxdepth 2 -name "*.webm" >/dev/null && {
                    mv ./*.webm "$MUSIC_DIR"
                    __
                    printf '%s\n' " ${critical}Conversion aborted or wrong option," \
                    " All .webm files have been moved in $MUSIC_DIR.${nc}"
                    __
                }
            ;;
        esac
        
    fi
    rm -rf "$HOME"/.parallel 2>/dev/null
    clear; __
    find . -iname "*.webm" -exec rm {} \; && \
    printf '%s\n' " ${info}Conversion done.${nc}" \
    && sleep 2
}
