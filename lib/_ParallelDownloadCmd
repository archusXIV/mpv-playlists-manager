#!/usr/bin/env bash
## This is a part of main script: mpm.

# shellcheck disable=SC2154
_ParallelDownloadCmd() {

    case "$1" in
        parallel)
            # unfortunately we can't use _GetLinkTitle here, because adding it to ${ytfmt[@]}
            # will cause a race condition, and download will fail.
            declare -a ytfmt=(
                "yt-dlp --format bestaudio\/best"
                "yt-dlp --format bestvideo+bestaudio\/best"
            )

            __sedAudioCmd() ( sed -i "s/^/${ytfmt[0]} ${ytdlPreset_NC[*]} /" "$1"; )
            __sedVideoCmd() ( sed -i "s/^/${ytfmt[1]} ${ytdlPreset_X[*]} /" "$1"; )

            __sedCleanTemporaryFiles() (
                sed -i '1,$d' {"$M3UFILE","$TITLES"}
                [[ $M3UFILE == "$DEFAULT_LIST" ]] && echo "#EXTM3U" > "$M3UFILE"
                clear
            )

            case "$2" in
                --choose-audio)
                    cp "$M3UFILE" "$JOBSLIST"
                    __sedAudioCmd "$JOBSLIST"
                    {
                        parallel --delay 1.75 --jobs 4 < "$JOBSLIST"
                        sed -i '1,$d' "$SELECTED_TITLES"
                        clear
                    } &
                ;;
                --choose-video)
                    cp "$M3UFILE" "$JOBSLIST"
                    __sedVideoCmd "$JOBSLIST"
                    {
                        parallel --delay 2.5 --jobs 3 < "$JOBSLIST"
                        sed -i '1,$d' "$SELECTED_TITLES"
                        clear
                    } &
                ;;
                --direct-video)
                    sed -i '1d' "$M3UFILE"
                    __sedVideoCmd "$M3UFILE"
                    {
                        parallel --delay 2.5 --jobs 3 < "$M3UFILE"
                        sed -i '1,$d' {"$M3UFILE","$TITLES"}
                        clear
                    } &
                ;;
                --get-audio)
                    [[ $M3UFILE == "$DEFAULT_LIST" || $M3UFILE == "$playlists_dir/$list" ]] && \
                    sed -i '1d' "$M3UFILE"
                    __sedAudioCmd "$M3UFILE"
                    {
                        parallel --delay 1.75 --jobs 4 < "$M3UFILE"
                        __sedCleanTemporaryFiles
                    } &
                ;;
                --get-video)
                    [[ $M3UFILE == "$DEFAULT_LIST" ]] && sed -i '1d' "$M3UFILE"
                    __sedVideoCmd "$M3UFILE"
                    {
                        parallel --delay 2.5 --jobs 3 < "$M3UFILE"
                        __sedCleanTemporaryFiles
                    } &
                ;;
            esac

            rm -rf {"$HOME"/.parallel,"$JOBSLIST"}
        ;;
        xargs)
            __sedRemoveAll() {
                if [[ $M3UFILE == "$SELECTED_URLS1" ]]; then
                    sed -i '1,$d' "$SELECTED_TITLES"
                else
                    sed -i '1,$d' {"$M3UFILE","$TITLES"}
                fi
            }

            case "$2" in
                --choose-audio|--get-audio)
                    grep '^https' "$M3UFILE" | xargs -I '{}' -P 4 \
                    yt-dlp --format bestaudio/best "${ytdlPreset_NC[@]}" {}
                    __sedRemoveAll
                    [[ $M3UFILE == "$DEFAULT_LIST" ]] && echo "#EXTM3U" > "$DEFAULT_LIST"
                ;;
                --choose-video|--direct-video|--get-video)
                    grep '^https' "$M3UFILE" | xargs -I '{}' -P 3 \
                    yt-dlp --format bestvideo+bestaudio/best "${ytdlPreset_X[@]}" {}
                    __sedRemoveAll
                    [[ $M3UFILE == "$DEFAULT_LIST" ]] && echo "#EXTM3U" > "$DEFAULT_LIST"
                ;;
            esac
        ;;
    esac

} >/dev/null 2>&1
