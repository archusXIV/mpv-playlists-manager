#!/bin/bash
## This is a part of main script: mpm.

# shellcheck disable=SC2154,SC2184
_ViewUrlInfo() {
    # Normaly in Bash nested functions use parentheses instead of curly braces,
    # but here it won't work because of the case statment right parenthese...
    # They will close the block before it finishes.

    prompt=( "[M]aim menu" "[B]ack to audio options" "[B]ack to video options" \
            "[D]ownload" "[P]lay" "[S]ave as" "[R]emove list" "[V]iew title(s):" )

    __audio() {
        if [[ -f $AUDIO_INFO ]]; then
            clear
            __
            cat -n "$AUDIO_INFO"
            __
            cat -n "$AUDIO_TITLE"
            __
            unset {prompt[2],prompt[7]}
            __
            echo "${info}" "${prompt[*]}" "${nc}"
            read -rsn 1 opt
            case "$opt" in
                b|B) __; _CopyAudio ;;
                m|M) _Menu ;;
                d|D) _GetAudio -a ;;
                p|P) _LoadAudio -a ;;
                r|R) _Remove -a ;;
                s|S) _Save -a ;;
            esac
        else
            echo " ${critical}No links in the list${nc}"
            sleep 2 && _CopyAudio
        fi
    }

    __video() {
        if [[ -f $VIDEO_INFO ]]; then
            clear
            __
            cat -n "$VIDEO_INFO"
            __
            cat -n "$VIDEO_TITLE"
            __
            unset {prompt[1],prompt[7]}
            __
            echo "${info}" "${prompt[*]}" "${nc}"
            read -rsn 1 opt
            case "$opt" in
                b|B) __; _CopyVideo ;;
                m|M) _Menu ;;
                d|D) _GetVideo -v ;;
                p|P) _LoadVideo -v ;;
                r|R) _Remove -v ;;
                s|S) _Save -v ;;
            esac
        else
            echo " ${critical}No links in the list${nc}"
            sleep 2 && _CopyVideo
        fi
    }

    __queue() {
        if (($(_GetLinesList -q) > 0)); then
            [[ -f $tmp_dir/1 ]] && rm "$tmp_dir"/1
            clear
            __
            echo " ${info}order |  default playlist link(s)${nc}"
            echo -e " ${info}______________________________________________________${nc}\n"
            sed '1d' "$QUEUE" | cat -n
            __
            while [[ -f $QUEUE ]]; do
                unset {prompt[1],prompt[2]}
                echo "${info}" "${prompt[*]}" "${nc}"
                read -rsn 1 opt
                case "$opt" in
                    m|M)
                        _Menu
                    ;;
                    d|D)
                        __
                        read -rsn 1 -p "${info}"' Download [A]udio, [V]ideo:'"${nc}" get
                        case "$get" in
                            a|A) __; _GetAudio -q ;;
                            v|V) __; _GetVideo -q ;;
                        esac
                    ;;
                    p|P)
                        __
                        read -rsn1 -p "${info}"' Play [A]udio, [V]ideo?: '"${nc}" play
                        case "$play" in
                            a|A) _LoadAudio -q ;;
                            v|V) _LoadVideo -q ;;
                        esac
                    ;;
                    r|R) _Remove -q ;;
                    s|S)
                        if [[ -f "$tmp_dir"/DefaultTitles ]]; then
                            _Save -q
                        else
                            echo " ${task}${b}Updating playlist titles...${nb}${nc}"
                            _GetMediaTitle -q \
                            | tee -a "$tmp_dir"/DefaultTitles \
                            | cat -n >/dev/null 2>&1
                            _Save -q
                        fi
                    ;;
                    v|V)
                        unset prompt[7]
                        if [[ -f "$tmp_dir"/DefaultTitles ]]; then
                            clear
                            __
                            cat -n "$tmp_dir"/DefaultTitles
                            __
                        elif [[ -f "$titles_dir"/default.m3u.titles ]]; then
                            clear
                            __
                            cp -f "$titles_dir"/default.m3u.titles "$tmp_dir"/DefaultTitles
                            cat -n "$tmp_dir"/DefaultTitles
                            __
                        else
                            clear
                            __
                            echo -e " ${task}${b}Getting titles...${nb}${nc}\n"
                            _GetMediaTitle -q > "$tmp_dir"/DefaultTitles
                            clear
                            __
                            cat -n "$tmp_dir"/DefaultTitles
                            __
                        fi
                    ;;
                esac
            done
        else
            echo " ${critical}There is nothing to do, Default playlist is empty...${nc}"
            sleep 3s
        fi
    }

    case "$1" in
        -a) __audio ;;
        -v) __video ;;
        -q) __queue ;;
    esac
}

