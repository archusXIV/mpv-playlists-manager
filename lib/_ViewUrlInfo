#!/bin/bash
## This is a part of main script: mpm.

# shellcheck disable=SC2154
_ViewUrlInfo() {

    local stars

    viewUrlInfoPrompt=(
        "[M]aim menu," "[A]dd more links," "[D]ownload,"
        "[P]lay," "[S]ave as," "[R]emove links/list: "
    )

    # let's play...
    stars=$(printf "%-54s" "*")
    
    __audioVideoCommon() (
        clear
        __
        echo " ${info}ORDER |  $menuTitleType PLAYLIST LINKS & TITLES.${nc}"
        echo -e " ${info}${stars// /*}${nc}\n"
        awk '$0 ~ /^https/{print $0}' "$menuTitleType_$URLS" \
        | nl && {
            __
            nl "$menuTitleType_$TITLES"
        __
        }
        echo "${info}" "${viewUrlInfoPrompt[@]}" "${nc}"
    )

    # Normaly in Bash nested functions use parentheses instead of curly braces,
    # but here it won't work because of the case statment right parenthese...
    # They will close the block before it finishes.
    __audio() {
        if [[ -s $URLS ]]; then
            __audioVideoCommon
            read -rsn 1 audioOptions
            case "$audioOptions" in
                a|A) __; _CopyUrls -a ;;
                m|M) _Menu ;;
                d|D) _GetAudio -a ;;
                p|P) _LoadAudioVideo -a ;;
                r|R) _Remove -a ;;
                s|S) _Save -a ;;
            esac
        else
            echo " ${critical}No links in the $Type list${nc}"
            sleep 2 && return
        fi
    }

    __video() {
        if [[ -s $URLS ]]; then
            __audioVideoCommon
            read -rsn 1 videoOptions
            case "$videoOptions" in
                a|A) __; _CopyUrls -v ;;
                m|M) _Menu ;;
                d|D) _GetVideo -v ;;
                p|P) _LoadAudioVideo -v ;;
                r|R) _Remove -v ;;
                s|S) _Save -v ;;
            esac
        else
            echo " ${critical}No links in the $Type list${nc}"
            sleep 2 && return
        fi
    }

    __queue() {
        if (($(_GetLinesList -q) > 0)); then
            rm "$tmp_dir"/1 2>/dev/null
            
            [[ $(grep "" -c "$DEFAULTITLES") -ne $(_GetLinesList -q) ]] && {
                printf '%s\n' " ${critical}Default list as been modified," \
                " ${task}${b}Updating Default list titles...${nb}${nc}"
                _GetMediaTitle -q > "$DEFAULTITLES"
            }
            clear
            __
            echo " ${info}ORDER |  DEFAULT PLAYLIST LINKS & TITLES.${nc}"
            echo -e " ${info}${stars// /*}${nc}\n"
            awk '$0 ~ /^https/{print $0}' "$QUEUE" \
            | nl && {
                __
                nl "$DEFAULTITLES"
                __
            }
            
            while [[ -f $QUEUE ]]; do
                unset 'viewUrlInfoPrompt[1]'
                echo "${info}" "${viewUrlInfoPrompt[*]}" "${nc}"
                read -rsn 1 queueOptions
                case "$queueOptions" in
                    d|D)
                        __
                        read -rsn 1 -p "${info}"' Download [A]udio, [V]ideo:'"${nc}" get
                        case "$get" in
                            a|A) __; _GetAudio -q ;;
                            v|V) __; _GetVideo -q ;;
                        esac
                    ;;
                    m|M)
                        _Menu
                    ;;
                    p|P)
                        __
                        read -rsn 1 -p "${info}"' Play [A]udio, [V]ideo?: '"${nc}" play
                        case "$play" in
                            a|A) _LoadAudioVideo -qa ;;
                            v|V) _LoadAudioVideo -qv ;;
                        esac
                    ;;
                    r|R) _Remove -q ;;
                    s|S)
                        if [[ -f $DEFAULTM3UTITLES \
                            || -f  $DEFAULTITLES ]]; then
                            _Save -q
                        else
                            printf '%s\n' " ${task}${b}Updating Default list titles...${nb}${nc}"
                            _GetMediaTitle -q \
                            | tee -a "$DEFAULTITLES" \
                            | cat -n >/dev/null 2>&1
                            _Save -q
                        fi
                    ;;
                esac
            done
        else
            echo " ${critical}There is nothing to do, Default playlist is empty...${nc}"
            sleep 3
        fi
    }

    case "$1" in
        -a) __audio ;;
        -v) __video ;;
        -q) __queue ;;
    esac
}