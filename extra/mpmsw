#!/usr/bin/env bash
#
# Script name: mpmsw version 1.0.3
# Author: Barret E <archus@protonmail>
# Licensed under the GPLv2
# Github: https://github.com/archusXIV/mpv-playlists-manager
# Youtube channel: https://www.youtube.com/@mpv-playlists-manager-mv8sh
#
# This script is designed as a companion for mpv-playlists-manager
# and it checks if the current date and time match any of the scheduled times
# in schedules.txt, if a match is found yt-dlp downloads the audio/videos
# from the corresponding m3u file (make sure that the URLs provide audio files).
# Please verify the schedules directory, by default:
# ~/.local/share/mpv-playlists-manager/schedules
#
# Change the yt-dlp format options if you will:
# audio = ytdlpAudioCmd=( bestaudio/best )
# video = ytdytdlpVideoCmd=( bestvideo+bestaudio/best --merge-output-format mp4 )
# Run it in your terminal, (it will stay attached): mpmsw

# shellcheck disable=SC2164
trap _Cleanup SIGINT SIGTERM

for dep in awk sed yt-dlp; do
    command -v "$dep" >/dev/null || {
        echo "$dep is not installed...exiting"
        exit 127
    }
done

# Edit your directories and yt-dlp options here.
: "${XDG_DATA_HOME:-$HOME/.local/share}"
schedules_dir="$XDG_DATA_HOME/mpv-playlists-manager/schedules"
schedules_file="$schedules_dir/schedules.txt"
# yt-dlp format options here
ytdlpAudioCmd=( bestaudio/best )
ytdlpVideoCmd=( bestvideo+bestaudio/best --merge-output-format mp4 )

if [[ -d $schedules_dir ]]; then
    command cd "$schedules_dir"
    [[ ! -f $schedules_file ]] && {
        printf '%s\n' " No scheduled downloads found."
        exit 1
    }
else
    printf '%s\n' " Schedule directory does not exist." \
        " Please check your mpmrc file or edit this script."
    exit 1
fi

_Cleanup() {
    local m3u=(*.m3u)
    rm {ALL,LISTS,TIME,TYPE}.txt
    [[ ! -s $schedules_file ]] && rm "$schedules_file"
    # putting back the header removed sooner in case we hit Ctrl+C
    ((${#m3u[@]} >= 1)) && sed -i '1s/^/#EXTM3U\n/' "${LISTS[@]}"
    notify-send 'Scheduled downloads cancelled or finished'
    exit 0
}

# sorting our list and creating needed arrays in the while loop
sort -t'|' -k1 "$schedules_file" -o "$schedules_file"
sed 's/.*| //g' "$schedules_file" > LISTS.txt
sed 's/ |.*$//g' "$schedules_file" > TIME.txt
awk '/audio|video/{print $5}' "$schedules_file" > TYPE.txt
cat {LISTS,TIME,TYPE}.txt > ALL.txt

declare -a LISTS TIME TYPE
mapfile -t ALL < ALL.txt
for line in "${ALL[@]}"; do
    [[ $line =~ .m3u$ ]] && {
        LISTS+=("$line")
        # removing the header of playlist for yt-dlp --batch-file option
        sed -i '/#EXTM3U/d' "$line"
    }
    [[ $line =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2} ]] && TIME+=("$line")
    [[ $line =~ audio|video ]] && TYPE+=("$line")
done

_Message() {
    printf '%s\n' \
        " $(date '+%H:%M') - Downloading ${TYPE[${index}]} from ${LISTS[${index}]}"
}

index=0
while true; do
    if [[ ${TIME[${index}]} == $(date '+%Y-%m-%d @ %H:%M') ]]; then
        if [[ ${TYPE[${index}]} == audio ]]; then
            _Message
            yt-dlp \
                --format "${ytdlpAudioCmd[@]}" \
                --batch-file "${LISTS[${index}]}" >/dev/null 2>&1
        else
            _Message
            yt-dlp \
                --format "${ytdlpVideoCmd[@]}" \
                --batch-file "${LISTS[${index}]}" >/dev/null 2>&1
        fi
        # cleaning already downloaded lines & files
        sed -i "/${LISTS[${index}]}/d" "$schedules_file"
        rm {"${LISTS[${index}]}","${LISTS[${index}]}.titles"}
        ((index++))
        ((index == ${#LISTS[@]})) && break
    fi
    sleep 60
done

_Cleanup
